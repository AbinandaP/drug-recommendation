import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.preprocessing import LabelEncoder, StandardScaler
#training set of data
data = pd.read_csv('drugsComTrain_raw.csv')
#data preprocessing
X_rating = data[['rating']].values
X_condition = data[['condition']].values
y = data['usefulCount'].values
# Encode categorical features (condition)
condition_encoder = LabelEncoder()
X_condition_encoded = condition_encoder.fit_transform(X_condition)
# Normalize numeric features (rating)
scaler = StandardScaler()
X_rating = scaler.fit_transform(X_rating)
# Concatenate features
X = np.hstack((X_condition_encoded.reshape(-1, 1), X_rating))
# Define the neural network model
model = Sequential()
model.add(Dense(128, activation='relu', input_dim=X.shape[1]))
model.add(Dense(64, activation='relu'))
model.add(Dense(1, activation='linear'))
# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')
# Train the model on the entire dataset
model.fit(X, y, epochs=10, batch_size=64)
# Get user input for condition and rating
user_condition = input("Enter the condition: ")
user_rating = float(input("Enter the rating: "))
# Encode user condition input
user_condition_encoded = condition_encoder.transform([user_condition])[0]
# Normalize user rating input
user_rating_scaled = scaler.transform(np.array([[user_rating]]))[0][0]
user_input = np.array([[user_condition_encoded, user_rating_scaled]])
predicted_usefulCount = model.predict(user_input)[0][0]
print(predicted_usefulCount)
matching_drugs = data[(data['condition'] == user_condition) & (data['usefulCount'] == round(predicted_usefulCount))]
if len(matching_drugs) > 0:
    recommended_drug = matching_drugs.iloc[0]['drugName']
    print(f"Recommended Drug: {recommended_drug}")
else:
    print("No matching drug found for the given condition and usefulCount.")
